<#if far.isRunningIos()>
<#-- Enable periodic inventory notification every 30 mins to report metrics. -->
    cgna profile cg-nms-periodic
      add-command show inventory | format flash:/managed/odm/cg-nms.odm
      no active
      interval 15
      active
    exit
<#-- Enable periodic configuration (heartbeat) notification every 10 mins. -->
   cgna heart-beat interval 10

<#-- Begin eCVD template -->

<#-- Default BootStrap Configuration -->

<#-- assign sublist 		= "${far.eid}"?split("+")[0..1]-->
<#-- assign pid = sublist[0]-->
<#-- assign model = pid[0..4]-->
<#-- assign sn = sublist[1]-->
<#--assign gwips = far.ip?split(".")-->
<#--assign nwk_suffix = (gwips[3]?number / 32)?int * 32-->
<#--assign nwk_addr = gwips[0] + "." + gwips[1] + "." + gwips[2] + "." + nwk_suffix-->

<#assign model = "IR1101">
<#assign ether_if = "GigabitEthernet0/0/0">
<#assign cell_if = "Cellular0/1/0">

<#-- Interface Menu -->
<#assign FastEthernet1 = "${far.FastEthernet1}">
<#assign FastEthernet2 = "${far.FastEthernet2}">
<#assign FastEthernet3 = "${far.FastEthernet3}">
<#assign FastEthernet4 = "${far.FastEthernet4}">

<#-- WAN Menu -->
<#assign APN			= "${far.APN}">
<#assign EthernetPriority = "${far.EthernetPriority}"?number + 100>
<#assign Cell0Priority 	= "${far.Cell0Priority}"?number + 100>

<#-- LAN Menu -->
<#assign lanIP 		= "${far.lanIPAddress}"?split(".")>
<#assign lanNet 	= "${far.lanNetmask}"?split(".")>

<#-- Network Menu -->
<#assign PatProtocol = "${far.portForwarding[0].protocol}">

<#-- Device Settings Menu -->
<--#assign HostName	= "${far.HostName}"-->
<#assign domainName = "${far.domainName}">
<#-- assign DNSIP 		= "${far.DNSIP}" -->
<#assign UserName 	= "${far.Users[0].UserName}">
<#assign DNSIP		= "208.67.222.222 208.67.220.220">
<#assign clockTZ 	= "${far.clockTZ}">
<#-- assign clockDST	= "${far.clockDST}"--> 
<#assign ntpIP 		= "${far.ntpIP}">
  
<#-- Calculate Netmasks -->

<#assign  lan_ip=[]  lan_netmask=[]>

<#-- Binary Conversion of LAN IP-->

<#list lanIP as lann> 
<#assign lan=lann?number>
<#list 1..100 as y>
<#if lan < 1> 
<#if lan == 0>
<#list 1..8 as s> <#assign lan_ip=lan_ip+["0"]> </#list> </#if>
<#if lan_ip?size % 8 != 0> <#list 1..8 as s> <#assign lan_ip=lan_ip+["0"]> <#if lan_ip?size % 8 == 0> <#break> </#if> </#list> </#if>
<#assign ip_bit = lan_ip?reverse> <#break> </#if>

<#assign x=lan%2 st=x?string lan_ip=lan_ip+[st] lan=lan/2> </#list></#list>

<#-- Binary Conversion of NetMask-->

<#list lanNet as lann> 
<#assign lan=lann?number>
<#list 1..100 as y>
<#if lan < 1 >
<#if lan == 0>
<#list 1..8 as s> <#assign lan_netmask=lan_netmask+["0"]> </#list> </#if>
<#if lan_netmask?size % 8 != 0>
<#list 1..8 as s> <#assign lan_netmask=lan_netmask+["0"]> <#if lan_netmask?size % 8 == 0> <#break>
</#if> </#list> </#if>
<#assign subnet_bit= lan_netmask?reverse> <#break> </#if>

<#assign x=lan%2 st=x?string lan_netmask=lan_netmask+[st] lan=lan/2> </#list> </#list>

<#-- Logical AND operation between IP and NetMask-->

<#assign lan_netID=[]>
<#list ip_bit as rev_index>
<#if rev_index?string == "1" && subnet_bit[rev_index?index] == "1"><#assign lan_netID=lan_netID+["1"]></#if>
<#if rev_index?string == "1" && subnet_bit[rev_index?index] == "0"><#assign lan_netID=lan_netID+["0"]></#if>
<#if rev_index?string == "0" && subnet_bit[rev_index?index] == "1"><#assign lan_netID=lan_netID+["0"]></#if>
<#if rev_index?string == "0" && subnet_bit[rev_index?index] == "0"><#assign lan_netID=lan_netID+["0"]></#if>
</#list>
<#assign netid_bit=lan_netID?reverse>

<#--Binary to Decimal conversion of Logical AND product-->

<#assign netid=[]>
<#list netid_bit?chunk(8) as row> <#assign num=0 pow=1> <#list row as bit> <#assign num=num+pow*bit?number pow=pow*2> </#list>
<#assign netid=netid+[num]>
</#list>

<#--Network Address-->

<#assign lanNtwk = netid?join(".")?string>
<#assign lanWild = "${(255 - (lanNet[0])?number)?abs}.${(255 - (lanNet[1])?number)?abs}.${(255 - (lanNet[2])?number)?abs}.${(255 - (lanNet[3])?number)?abs}">
  
service tcp-keepalives-in
service tcp-keepalives-out
service timestamps debug datetime msec
service timestamps log datetime msec
service password-encryption
service call-home
platform qfp utilization monitor load 80
no platform punt-keepalive disable-kernel-core
!
!
!
no logging console
!
clock timezone ${clockTZ}
ntp server ${ntpIP}
!
  
ip name-server ${DNSIP}
ip domain name ${domainName}

ip dhcp excluded-address ${far.lanIPAddress}
!

ip dhcp pool subtended
    network ${lanNtwk} ${far.lanNetmask}
    default-router ${far.lanIPAddress} 
    dns-server ${DNSIP}
    lease 0 0 10
!
<#list far.Users as user >
		username ${user.UserName} privilege ${user.UserPriv} algorithm-type scrypt secret ${user.UserPassword}
</#list> 
!

ip sla 30
 icmp-echo 208.67.222.222 source-interface ${ether_if}
 frequency 10
!
ip sla schedule 30 life forever start-time now

ip sla 40
 icmp-echo 208.67.220.220 source-interface ${cell_if}
 frequency 50
!
ip sla schedule 40 life forever start-time now

track 5 interface ${ether_if} line-protocol
!
track 7 interface ${cell_if} line-protocol
!
track 30 ip sla 30 reachability
!
track 40 ip sla 40 reachability
!

interface ${ether_if}
    ip dhcp client route track 30
    ip address dhcp
    no shutdown
    ip nat outside
!
!
interface ${cell_if}
    ip address negotiated
    ip nat outside
    dialer in-band
    dialer idle-timeout 0
    dialer-group 1
    pulse-time 1
!
!
interface Vlan1
    ip address ${far.lanIPAddress} ${far.lanNetmask}
    ip nbar protocol-discovery
    ip nat inside
    ip verify unicast source reachable-via rx
!
!
<#-- enabling/disabling of ethernet ports -->

interface FastEthernet0/0/1
<#if FastEthernet1 != "true">
    shutdown
<#else>
	no shutdown
</#if>
!
interface FastEthernet0/0/2
<#if FastEthernet2 != "true">
    shutdown
<#else>
	no shutdown
</#if>   
!
interface FastEthernet0/0/3
<#if FastEthernet3 != "true">
    shutdown
<#else>
	no shutdown
</#if>    
!
interface FastEthernet0/0/4
<#if FastEthernet4 != "true">
    shutdown
<#else>
	no shutdown
</#if>

interface Async0/2/0
    no ip address
    encapsulation scada
!

<#-- Enable IOx -->
iox

<#-- Enable NAT and routing -->

ip forward-protocol nd
!
ip nat inside source route-map RM_WAN_ACL interface ${cell_if} overload
ip nat inside source route-map RM_WAN_ACL2 interface ${ether_if} overload
   
<#list far.portForwarding as PAT>
          ip nat inside source static ${PAT.privateIP} ${PAT.protocol} ${PAT.localPort} interface ${cell_if} ${PAT.publicPort}
</#list>
   
ip route 0.0.0.0 0.0.0.0 ${ether_if} DHCP ${EthernetPriority}
ip route 0.0.0.0 0.0.0.0 ${cell_if} ${Cell0Priority} track 40

ip route 208.67.222.222 255.255.255.255 ${ether_if} dhcp
ip route 208.67.220.220 255.255.255.255 ${cell_if} track 7
ip route 208.67.220.220 255.255.255.255 Null0 3
ip route 208.67.222.222 255.255.255.255 Null0 3

ip route 1.1.1.1 255.255.255.255 ${cell_if} 99 track 10

ip route 8.8.8.8 255.255.255.255 ${cell_if} tag 786
ip route 8.8.8.8 255.255.255.255 Null0 3 tag 786
!
!
ip ssh rsa keypair-name SSHKEY
ip ssh version 2
ip scp server enable
!
!
!
!
!
ip access-list extended NAT_ACL
    permit ip ${lanNtwk} ${lanWild} any
!
dialer-list 1 protocol ip permit
!
!
route-map RM_WAN_ACL permit 10 
    match ip address NAT_ACL
    match interface ${cell_if}
!
route-map RM_WAN_ACL2 permit 10 
    match ip address NAT_ACL
    match interface ${ether_if}
!
line vty 0 4
    exec-timeout 5 0
    length 0
    transport input ssh
!

<#-- Set APN -->
event manager applet change_apn
event timer countdown 10
action 10 cli command "enable"
action 15 cli command “${cell_if} lte profile create 1 ${APN}” pattern "confirm"
action 20 cli command "y"
action 25 cli command "end"
action 30 end
!
!
<#-- End eCVD template -->

<#elseif far.isRunningCgOs()>

<#else>
  ${provisioningFailed("FAR is not running CG-OS or IOS")}
</#if>
                         
